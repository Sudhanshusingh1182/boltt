const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };

  const CodeGenerationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  
  
    export const chatSession = model.startChat({
      generationConfig,
      history: [
      ],
    });
  
    // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // console.log(result.response.text());

    export const genAICode = model.startChat({
        generationConfig: CodeGenerationConfig,
        history: [
          {
            role: "user",
            parts: [
              {text: "generate ToDo app : Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHereâ€™s the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n   \n"},
            ],
          },
          {
            role: "model",
            parts: [
              {text: "```json\n{\n  \"projectTitle\": \"Todo App with React and Tailwind CSS\",\n  \"explanation\": \"This project is a simple Todo application built with React, utilizing Tailwind CSS for styling. It includes features to add, edit, and delete tasks. The application is structured into multiple components for better organization and maintainability. It uses date-fns for date formatting, and chartjs for task analysis graph. Lucide-react icons are used where necessary to enhance the user interface.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React from 'react';\\nimport TodoList from './components/TodoList';\\n\\nfunction App() {\\n  return (\\n    <div className=\\\"bg-gray-100 min-h-screen font-sans\\\">\\n      <div className=\\\"container mx-auto p-4\\\">\\n      <header className=\\\"mb-8 p-4 bg-white shadow rounded-md flex items-center justify-between\\\">\\n      <h1 className=\\\"text-2xl font-bold text-gray-800 flex items-center\\\"><img src=\\\"https://archive.org/download/placeholder-image/placeholder-image.jpg\\\" alt=\\\"Todo Logo\\\" className=\\\"h-8 w-8 mr-2 rounded-full\\\" />Todo App</h1>\\n      </header>\\n        <TodoList />\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\"\n    },\n    \"/components/TodoList.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport { Plus, Edit, Trash, Check, Clock } from 'lucide-react';\\nimport { format } from 'date-fns';\\nimport TaskChart from './TaskChart';\\n\\n\\nfunction TodoList() {\\n  const [tasks, setTasks] = useState(() => {\\n        const savedTasks = localStorage.getItem('tasks');\\n        if (savedTasks) {\\n            return JSON.parse(savedTasks);\\n        } else {\\n            return [];\\n        }\\n    });\\n  const [newTask, setNewTask] = useState('');\\n    const [editingId, setEditingId] = useState(null);\\n    const [editTaskText, setEditTaskText] = useState('');\\n  const [chartData, setChartData] = useState(null);\\n  \\n  useEffect(() => {\\n        localStorage.setItem('tasks', JSON.stringify(tasks));\\n    }, [tasks]);\\n\\n    useEffect(() => {\\n         const completedCount = tasks.filter(task => task.completed).length;\\n        const incompletedCount = tasks.filter(task => !task.completed).length;\\n        \\n         setChartData({\\n            labels: ['Completed', 'Incomplete'],\\n            datasets: [{\\n                label: 'Task Status',\\n                data: [completedCount, incompletedCount],\\n                backgroundColor: ['#36a2eb', '#ff6384'],\\n                hoverBackgroundColor: ['#36a2eb', '#ff6384']\\n            }]\\n        });\\n    }, [tasks]);\\n    \\n\\n  const handleAddTask = () => {\\n    if (newTask.trim()) {\\n      setTasks([...tasks, { id: Date.now(), text: newTask, completed: false, createdAt: new Date() }]);\\n      setNewTask('');\\n    }\\n  };\\n\\n  const handleDeleteTask = (id) => {\\n    setTasks(tasks.filter((task) => task.id !== id));\\n  };\\n\\n  const handleToggleComplete = (id) => {\\n    setTasks(\\n      tasks.map((task) =>\\n        task.id === id ? { ...task, completed: !task.completed } : task\\n      )\\n    );\\n  };\\n\\n  const handleEditTask = (id, text) => {\\n        setEditingId(id);\\n        setEditTaskText(text);\\n    };\\n\\n    const handleSaveEdit = (id) => {\\n        setTasks(\\n          tasks.map((task) =>\\n            task.id === id ? { ...task, text: editTaskText } : task\\n          )\\n        );\\n        setEditingId(null);\\n        setEditTaskText('');\\n      };\\n\\n  return (\\n    <div className=\\\"bg-white shadow rounded-md p-4\\\">\\n     <div className=\\\"flex mb-4\\\">\\n        <input\\n          type=\\\"text\\\"\\n          placeholder=\\\"Add a new task...\\\"\\n          value={newTask}\\n          onChange={(e) => setNewTask(e.target.value)}\\n          className=\\\"border p-2 mr-2 flex-grow rounded-md shadow-sm\\\"\\n        />\\n        <button onClick={handleAddTask} className=\\\"bg-green-500 hover:bg-green-600 text-white p-2 rounded-md shadow-sm\\\">\\n          <Plus className=\\\"h-5 w-5\\\" /> Add\\n        </button>\\n      </div>\\n\\n      <ul className=\\\"divide-y divide-gray-200\\\">\\n        {tasks.map((task) => (\\n          <li key={task.id} className=\\\"py-3 flex items-center justify-between\\\">\\n             {editingId === task.id ? (\\n                            <div className=\\\"flex-grow flex items-center\\\">\\n                                <input\\n                                    type=\\\"text\\\"\\n                                    value={editTaskText}\\n                                    onChange={(e) => setEditTaskText(e.target.value)}\\n                                    className=\\\"border p-2 mr-2 flex-grow rounded-md shadow-sm\\\"\\n                                />\\n                                <button onClick={() => handleSaveEdit(task.id)} className=\\\"bg-blue-500 hover:bg-blue-600 text-white p-2 rounded-md shadow-sm\\\">\\n                                    Save\\n                                </button>\\n                            </div>\\n                        ) : (\\n                            <div className=\\\"flex-grow flex items-center\\\">\\n                                <input\\n                                    type=\\\"checkbox\\\"\\n                                    checked={task.completed}\\n                                    onChange={() => handleToggleComplete(task.id)}\\n                                    className=\\\"mr-2 h-5 w-5\\\"\\n                                />\\n                                <span className={task.completed ? 'line-through text-gray-500' : 'text-gray-800'}>\\n                                    {task.text} <span className=\\\"ml-2 text-gray-500 text-sm\\\"> Created at: {format(task.createdAt, 'MMM d, yyyy h:mm a')}</span>\\n                                </span>\\n                            </div>\\n                        )}\\n           <div>\\n                        {editingId !== task.id && (\\n                                            <> <button onClick={() => handleEditTask(task.id, task.text)} className=\\\"text-blue-500 hover:text-blue-700 mr-2\\\">\\n                                                 <Edit className=\\\"h-5 w-5\\\" />\\n                                            </button>\\n                                           <button onClick={() => handleDeleteTask(task.id)} className=\\\"text-red-500 hover:text-red-700\\\">\\n                                                <Trash className=\\\"h-5 w-5\\\" />\\n                                            </button>\\n                                            </>\\n                                           \\n                                        )}\\n                        </div>\\n          </li>\\n        ))}\\n      </ul>\\n       {chartData && <TaskChart chartData={chartData} />}\\n    </div>\\n  );\\n}\\n\\nexport default TodoList;\\n\"\n    },\n    \"/components/TaskChart.js\":{\n       \"code\": \"import React from 'react';\\nimport { Doughnut } from 'react-chartjs-2';\\nimport { Chart, registerables } from 'chart.js';\\nChart.register(...registerables);\\n\\n\\n\\n\\nfunction TaskChart({ chartData }) {\\n  return (\\n    <div className=\\\"mt-4 bg-white p-4 shadow rounded-md\\\">\\n      <h3 className=\\\"text-lg font-semibold text-gray-800 mb-2\\\">Task Analysis</h3>\\n       <Doughnut data={chartData}  />\\n    </div>\\n  );\\n}\\n\\nexport default TaskChart;\\n\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/TodoList.js\",\n     \"/components/TaskChart.js\"\n  ]\n}\n```\n"},
            ],
          },
        ],
    })
  